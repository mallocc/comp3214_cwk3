// bullet declarations
btBroadphaseInterface* broadphase;
btDefaultCollisionConfiguration* collisionConfiguration;
btCollisionDispatcher* dispatcher;
btSequentialImpulseConstraintSolver* solver;
btDiscreteDynamicsWorld* dynamicsWorld;
std::vector<btRigidBody*> MovingBits; // so that can get at all bits


glm::vec3 getVec3(btVector3 v)
{
	return glm::vec3(v[0], v[1], v[2]);
}

btVector3 getBtVector3(glm::vec3 v)
{
	return btVector3(v.x, v.y, v.z);
}


btRigidBody* SetSphere(float size, btTransform T) {
	btCollisionShape* fallshape = new btSphereShape(size);
	btDefaultMotionState* fallMotionState = new btDefaultMotionState(T);
	btScalar mass = 1;
	btVector3 fallInertia(0, 0, 0);
	fallshape->calculateLocalInertia(mass, fallInertia);
	btRigidBody::btRigidBodyConstructionInfo fallRigidBodyCI(mass, fallMotionState, fallshape, fallInertia);
	btRigidBody* fallRigidBody = new btRigidBody(fallRigidBodyCI);
	fallRigidBody->setLinearVelocity(btVector3(randf(), randf(), randf()) * 100.0f);
	fallRigidBody->setRestitution(COE);
	//fallRigidBody->setFriction(0.0f);
	//fallRigidBody->setRollingFriction(0.0f);
	//fallRigidBody->setDamping(0.0f, 0.0f);
	dynamicsWorld->addRigidBody(fallRigidBody);
	return fallRigidBody;
	return nullptr;
}

btRigidBody* SetCube(btVector3 size, btTransform T) {
	btCollisionShape* fallshape = new btBoxShape(size);
	btDefaultMotionState* fallMotionState = new btDefaultMotionState(T);
	btScalar mass = 1;
	btVector3 fallInertia(0, 0, 0);
	fallshape->calculateLocalInertia(mass, fallInertia);
	btRigidBody::btRigidBodyConstructionInfo fallRigidBodyCI(mass, fallMotionState, fallshape, fallInertia);
	btRigidBody* fallRigidBody = new btRigidBody(fallRigidBodyCI);
	fallRigidBody->setLinearVelocity(btVector3(randf(), randf(), randf()) * 100.0f);
	fallRigidBody->setRestitution(COE);
	//fallRigidBody->setFriction(0.0f);
	//fallRigidBody->setRollingFriction(0.0f);
	//fallRigidBody->setDamping(0.0f, 0.0f);
	dynamicsWorld->addRigidBody(fallRigidBody);
	return fallRigidBody;
	return nullptr;
}


void bullet_step(int i, Obj * obj) {
	btTransform trans;
	btRigidBody* moveRigidBody;
	int n = MovingBits.size();
	moveRigidBody = MovingBits[i];
	moveRigidBody->getMotionState()->getWorldTransform(trans);
	btQuaternion rot = moveRigidBody->getCenterOfMassTransform().getRotation();
	obj->pos = glm::vec3(trans.getOrigin().getX(), trans.getOrigin().getY(), trans.getOrigin().getZ());
	obj->rotation = glm::vec3(rot.getAxis().getX(), rot.getAxis().getY(), rot.getAxis().getZ());
	obj->theta = rot.getAngle();
}

void bullet_close() {
  /*
   * This is very minimal and relies on OS to tidy up.
   */
	if (MovingBits.size() > 0)
	{
		btRigidBody* moveRigidBody;
		moveRigidBody = MovingBits[0];
		dynamicsWorld->removeRigidBody(moveRigidBody);
		delete moveRigidBody->getMotionState();
		delete moveRigidBody;
	}
  delete dynamicsWorld;
  delete solver;
  delete collisionConfiguration;
  delete dispatcher;
  delete broadphase;
}

void init_bullet()
{
	/*
	* set up world
	*/
	broadphase = new btDbvtBroadphase();
	collisionConfiguration = new btDefaultCollisionConfiguration();
	dispatcher = new btCollisionDispatcher(collisionConfiguration);
	solver = new btSequentialImpulseConstraintSolver;
	dynamicsWorld = new btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);
	dynamicsWorld->setGravity(btVector3(0., GRAVITY, 0));

	/*
	* Set up sphere 0
	*/
	//MovingBits.push_back(SetSphere(1, btTransform(btQuaternion(0,0,1,1),btVector3(sphere.pos.x,sphere.pos.y,sphere.pos.z))));

}